package com.euler;

import com.euler.Divisibility;

public class Fibonacci {

	/** Problem 2: Even Fibonacci Numbers
	 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
	 * By starting with 1 and 2, the first 10 terms will be:
	 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
	 * find the sum of the even-valued terms.
	 */
	
	public static int sumOfFibonacciNumbers(int max, int divisor) {
		int sum = 0;
		int currentNumber = 1;
		int currentNumberCounter = 1;
		while (currentNumber < max){
			//System.out.println(currentNumberCounter+":"+currentNumber);
			if (Divisibility.isDivisible(divisor, currentNumber)){
				sum+=currentNumber;
			}
			currentNumberCounter++;
			currentNumber = fibonacciRecursion(currentNumberCounter);
		}
		//System.out.println(sum);
		return sum;
	}
	public static int sumOfFibonacciNumbers(int max) {
		return sumOfFibonacciNumbers(max, 1);
	}
	
	public static int fibonacciRecursion(int number){
		if (number<=0){ return 0; }
		if (number==1){	return 1; } 
		if (number==2){ return 2; }
		return fibonacciRecursion(number-1)+fibonacciRecursion(number-2);
	}
}
